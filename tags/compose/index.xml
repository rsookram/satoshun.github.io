<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>compose on stsnブログ</title>
    <link>https://satoshun.github.io/tags/compose/</link>
    <description>Recent content in compose on stsnブログ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>Sato Shun</copyright>
    <lastBuildDate>Sat, 29 Feb 2020 23:32:01 +0000</lastBuildDate>
    
	<atom:link href="https://satoshun.github.io/tags/compose/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Jetpack Compose: Modelとstate</title>
      <link>https://satoshun.github.io/2020/02/compose-model-state/</link>
      <pubDate>Sat, 29 Feb 2020 23:32:01 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2020/02/compose-model-state/</guid>
      <description>Jetpack Composeのデータ監視方法について紹介します。
state まず、stateメソッドの紹介をします。
stateメソッドを使うと値を監視することができ、値が変更されたときに自動で再構成（recomposition）してくれます。
次のように、Viewの状態を表すのに便利に使えます。
@Composable fun MyCheckbox() { // 初期値false  var checked by state { false } Checkbox( checked = checked, onCheckedChange = { // stateで定義した値を更新すると、自動でUIの再構成（recomposition)が走る  checked = it } ) } state { 初期値 }って感じで定義して、その値を更新するとUIの再構成をしてくれます。
この例の場合、Checkboxがクリックされると、checkedの状態が変わり、Viewが再構成されます。
Model 次にModelです。Modelはアノテーションで定義されています。 Modelアノテーションをつけたクラスのプロパティが監視対象になり、プロパティが更新されたときに自動で再構成してくれます。
例えば、クリックされたカウントを保持するModelは次のように作ります。
@Model class Count( var count: Int = 0 ) @Composable fun MyText() { // Modelの定義。引数から渡すこともある  val count = Count() Ripple(bounded = false) { Clickable(onClick = { // Modelの値を更新すると、自動で再構成（recomposition)が走る  count.</description>
    </item>
    
  </channel>
</rss>