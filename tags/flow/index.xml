<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>flow on stsnブログ</title>
    <link>https://satoshun.github.io/tags/flow/</link>
    <description>Recent content in flow on stsnブログ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>Sato Shun</copyright>
    <lastBuildDate>Mon, 13 Jan 2020 11:47:10 +0000</lastBuildDate>
    
	<atom:link href="https://satoshun.github.io/tags/flow/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Kotlin: FlowのflowOnオペレータの挙動</title>
      <link>https://satoshun.github.io/2020/01/coroutine-flowon/</link>
      <pubDate>Mon, 13 Jan 2020 11:47:10 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2020/01/coroutine-flowon/</guid>
      <description>CoroutineのFlowにはflowOnオペレータが定義されており、実行コンテキストを変更することが出来ます。
この記事はRxJava2のsubscribeOnとの挙動の違いを見ていきたいと思います。
動かしてみる まずは、Flowから。
withContext(Dispatchers.Main) { flowOf(1) .map { // Dispatchers.Defaultで動く  println(&amp;#34;${Thread.currentThread()}&amp;#34;) it } .flowOn(Dispatchers.Default) .map { // Dispatchers.Mainで動く  println(&amp;#34;${Thread.currentThread()}&amp;#34;) it } .collect { // Dispatchers.Mainで動く  println(&amp;#34;${Thread.currentThread()}&amp;#34;) } } flowOnの上部（upstream)では、Dispatchers.Defaultで動き、下部（downstream)では、flowOnの影響を受けていないことが分かります。flowOnはdownstreamに影響しないため、このような動作になります。
次にRxJavaです。
Single .just(1) .map { // Schedulers.io上で動く  println(&amp;#34;${Thread.currentThread()}&amp;#34;) it } .subscribeOn(Schedulers.io()) .map { // Schedulers.io上で動く  println(&amp;#34;${Thread.currentThread()}&amp;#34;) it } .subscribe({ // Schedulers.io上で動く  println(&amp;#34;${Thread.currentThread()}&amp;#34;) }) {} RxJavaではsubscribeOnは、特に途中でスケジューラーの変更が無い限り同一のスレッドで動作します。 なので、subscribeOn(Schedulers.io())を設定すると、下部（downstream)でもSchedulers.io上で実行されます。
FlowのflowOnを、RxJavaのsubscribeOnと同じ感覚で実装すると、間違ってしまうので注意が必要です。
ただ、Flowのmapなどのオペレーターはsuspend関数を取るので、基本的にはスレッドを意識しなくても良いはずです。
まとめ  flowOnとRxJavaのsubscribeOn、動作がそれぞれ異なるので注意が必要  </description>
    </item>
    
    <item>
      <title>Kotlin: FlowのBufferの指定について</title>
      <link>https://satoshun.github.io/2019/08/flow-buffer/</link>
      <pubDate>Sat, 03 Aug 2019 23:37:02 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2019/08/flow-buffer/</guid>
      <description>CoroutineのFlowにはBufferを指定することができます。Bufferの指定によってどのように動作が変わるかを試してみました。
この記事は、少しFlowを触ったことあるぞ！って言う人向けになります。また、検証はCoroutine 1.3.0-RCで行っております。
Bufferの種類 Bufferの種類は5つあります。
 UNLIMITED RENDEZVOUS CONFLATED BUFFERED 50、100などの、具体的な値  実質、BUFFEREDと同じ挙動をする    検証コード // flowストリームの作成 val f = flow { repeat(100) { delay(1) emit(&amp;#34;$it&amp;#34;) } } // observeする lifecycleScope.launch { f .buffer(...) ここでBufferを指定する .collect { delay(100) Log.d(&amp;#34;t4&amp;#34;, &amp;#34;$it&amp;#34;) } } このコードは、まず最初に、flowメソッドを使って、Flowストリームを作ります。これをこの記事ではProducer（生産者）と呼びます。このProducerは1つの値を送るのに約delay(1)かかります。なので、処理に約1msかかります。
次に、作ったflowをobserveします。observeする側をConsumer（消費者）と呼びます。Consumerではdelay(100)しているので、処理に約100msかかります。
これは、次の関係を作り出しています
 Consumerの処理時間 &amp;gt; Producerの処理時間  この状態で、Bufferを指定したらどのように挙動が変わるかを見ていきます。
UNLIMITED f .buffer(Channel.UNLIMITED) .collect { delay(100) Log.d(&amp;#34;t4&amp;#34;, &amp;#34;$it&amp;#34;) } UNLIMITEDはBufferのサイズを無制限にします。
Consumer側で処理が終わってなくても値を送ります。その値は、Consumerが現在のタスクをしていたら、flowの内部で一旦保存されます。そして、Consumerの現在のタスクが完了したら、内部で保存したデータが1つずつ流れてきます。
 Producer: Consumerの状態に関わらず、値を流してくる。Consumerの処理が終わっていないときは、内部キャッシュに保存されていく Consumer: すべての値を順番通りに受け取ることが出来る  RENDEZVOUS f .</description>
    </item>
    
    <item>
      <title>ConstraintLayout Flowの紹介</title>
      <link>https://satoshun.github.io/2019/04/constraintlayout-flow/</link>
      <pubDate>Sun, 28 Apr 2019 11:13:20 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2019/04/constraintlayout-flow/</guid>
      <description>ConstraintLayoutの2.0.0 alpha 5にFlow Virtual Layoutが導入されました🎉 Flowを使うことで、対象のViewを様々なルールで並べることができます。
メリットとしては、次のようなものがあります。
 Viewの階層をフラットに保つことが出来る Flowは普通のViewのように扱う事ができる MotionLayoutと相性が良い  では、どのように書くのかを見ていきます。
 1. 配置する方向を決める android:orientationから、horizontal or verticalを指定できます。
&amp;lt;androidx.constraintlayout.widget.ConstraintLayout android:layout_width=&amp;#34;match_parent&amp;#34; android:layout_height=&amp;#34;match_parent&amp;#34;&amp;gt; &amp;lt;androidx.constraintlayout.helper.widget.Flow android:id=&amp;#34;@+id/flow&amp;#34; android:layout_width=&amp;#34;0dp&amp;#34; android:layout_height=&amp;#34;0dp&amp;#34; android:orientation=&amp;#34;horizontal&amp;#34; android:background=&amp;#34;@android:color/white&amp;#34; app:layout_constraintBottom_toBottomOf=&amp;#34;parent&amp;#34; app:layout_constraintEnd_toEndOf=&amp;#34;parent&amp;#34; app:layout_constraintStart_toStartOf=&amp;#34;parent&amp;#34; app:layout_constraintTop_toTopOf=&amp;#34;parent&amp;#34; /&amp;gt; ... これはorientationにhorizontalを持ちます。また、通常のViewのように各constraintsを指定し、配置することができます。
2. wrapModeを決める flow_wrapModeで指定することができます。
wrapModeでは、どのようにViewを並べるかを指定でき、3種類のmodeがあります。
 none  単純にsingle lineに並べる   chain  単純に順番に配置していく。その行（列）に収まらない場合は次の行（列）に配置する   aligned  各要素を整列するように配置していく。テーブルのようなイメージ    &amp;lt;androidx.constraintlayout.helper.widget.Flow android:id=&amp;#34;@+id/flow&amp;#34; android:layout_width=&amp;#34;0dp&amp;#34; android:layout_height=&amp;#34;0dp&amp;#34; android:orientation=&amp;#34;horizontal&amp;#34; android:background=&amp;#34;@android:color/white&amp;#34; app:flow_wrapMode=&amp;#34;chain&amp;#34; app:layout_constraintBottom_toBottomOf=&amp;#34;parent&amp;#34; app:layout_constraintEnd_toEndOf=&amp;#34;parent&amp;#34; app:layout_constraintStart_toStartOf=&amp;#34;parent&amp;#34; app:layout_constraintTop_toTopOf=&amp;#34;parent&amp;#34; /&amp;gt; これはchainで対象のViewを配置します。</description>
    </item>
    
  </channel>
</rss>