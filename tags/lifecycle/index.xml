<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>lifecycle on stsnブログ</title>
    <link>https://satoshun.github.io/tags/lifecycle/</link>
    <description>Recent content in lifecycle on stsnブログ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>Sato Shun</copyright>
    <lastBuildDate>Sat, 18 Jan 2020 13:09:08 +0000</lastBuildDate>
    
	<atom:link href="https://satoshun.github.io/tags/lifecycle/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>FragmentでViewの参照を持つとメモリリークする話と実装</title>
      <link>https://satoshun.github.io/2020/01/fragment-view-memory-leak/</link>
      <pubDate>Sat, 18 Jan 2020 13:09:08 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2020/01/fragment-view-memory-leak/</guid>
      <description>View Bindingのドキュメントが更新され、onDestroyViewのタイミングで保持しているBindingの参照を解放する節が追記されました。
Use view binding in fragments
Fragment自体のライフサイクルのほうが、FragmentのViewのライフサイクルより長いので、FragmentでBindingの参照を保持するとリークしてしまうためです。
この記事では、メモリリークをしないために、どのような実装が考えられるかを紹介していきます。
1. onDestoryViewで解放する 公式ドキュメントに載っている方法です。
// onCreatedViewで初期化 private var _binding: ResultProfileBinding? = null private val binding get() = _binding!! override fun onDestroyView() { _binding = null } onDestroyViewで参照を解放するコードを書きます。シンプルですが、冗長なのかなと思います。
2. AACサンプルで使っているAutoClearedValueを使う takahiromさんにTwitterで教えてもらったんですが、AACサンプルではDelegationを使って、自動で参照を解放しているようです。
 DroiKaigiでは、Adapterとか持ちたい場合もあるので、AACのサンプルにあるAutoCleardValueにしてみました https://t.co/IUNmeQLzfB
&amp;mdash; takahirom (@new_runnable) January 17, 2020   次のように使います。
// onCreatedViewで初期化する var binding by autoCleared&amp;lt;RepoFragmentBinding&amp;gt;() var adapter by autoCleared&amp;lt;RepoFragmentAdapter&amp;gt;() AutoClearedValueは、viewLifecycleOwnerLiveDataを購読しており、onDestroyViewのタイミングで、自動的に参照を解放してくれます。また、ReycyclerView.Adapterでも同様に使うことが出来ます。
詳細な実装はAutoClearedValue.ktを見てください。
3. DataBinding-Ktxを使う DataBinding-ktxというライブラリを使うことで、valで定義することが可能になります。
// onCreatedViewで初期化しないのでも済む private val binding: ViewBindingFragmentBinding by viewBinding() 内部で、リフレクションを用いており、ViewBindingの場合でも自動的にBindingを生成してくれます。 また、AutoClearedValueと同様に、viewLifecycleOwnerLiveDataを購読しており、自動で参照を解放してくれます。</description>
    </item>
    
    <item>
      <title>FragmentとgetViewLifecycleの話</title>
      <link>https://satoshun.github.io/2018/12/view_lifecycle/</link>
      <pubDate>Fri, 21 Dec 2018 07:08:34 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2018/12/view_lifecycle/</guid>
      <description>この記事ではFragmentでLiveDataにObserverを登録するときはFragment#getViewLifecycleを使うと良いという話をします。
まず、Fragmentのおおまかなライフサイクルは次のようになっています。
 onAttach onCreate  onCreateView onViewCreated  &amp;hellip;   onDestoryView   onDestroy onDetach  ここで重要なのは、onDestroyが呼ばれることなく、複数回onCreateViewが呼ばれる可能性がある点です。
例えば、次のコードは間違っている可能性があります。
class MainFragment: Fragment() { ... override fun onViewCreated(view: View, savedInstanceState: Bundle?) { super.onViewCreated(view, savedInstanceState) viewModel.data.observe(this, Observer { ... }) } } なぜなら、LiveDataに渡したthis（LifecycleOwner）は、自身のライフサイクルに駆動するためです。 このObserverが開放されるタイミングは、Fragment#onDestroyがコールされたタイミングになります。 しかし前述したとおり、Fragment#onDestroyがコールされずに、複数回onCreateViewがコールされる可能性があるため、前のObserverが開放されずに残ってしまいます。
前述のコードのObserverはFragment本体のLifecycleに駆動されるのではなく、FragmentのViewに駆動するため、この問題が起こります。 よって、FragmentにはView用のLifecycleが用意されています。それが、Fragment#getViewLifecycleです。
前述のコードは次のように書くことが出来ます。
class MainFragment: Fragment() { ... override fun onViewCreated(view: View, savedInstanceState: Bundle?) { super.onViewCreated(view, savedInstanceState) // ViewのLifecycleOwnerを渡す  viewModel.data.observe(viewLifecycleOwner, Observer { ... }) } } このように書くことで、ObserverがViewのライフサイクルに駆動するため、複数のObserverが登録される問題を回避することが出来ます！！</description>
    </item>
    
  </channel>
</rss>