<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>constraintlayout on stsnブログ</title>
    <link>https://satoshun.github.io/tags/constraintlayout/</link>
    <description>Recent content in constraintlayout on stsnブログ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>Sato Shun</copyright>
    <lastBuildDate>Sun, 28 Apr 2019 11:13:20 +0000</lastBuildDate>
    
	<atom:link href="https://satoshun.github.io/tags/constraintlayout/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ConstraintLayout Flowの紹介</title>
      <link>https://satoshun.github.io/2019/04/constraintlayout-flow/</link>
      <pubDate>Sun, 28 Apr 2019 11:13:20 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2019/04/constraintlayout-flow/</guid>
      <description>ConstraintLayoutの2.0.0 alpha 5にFlow Virtual Layoutが導入されました🎉 Flowを使うことで、対象のViewを様々なルールで並べることができます。
メリットとしては、次のようなものがあります。
 Viewの階層をフラットに保つことが出来る Flowは普通のViewのように扱う事ができる MotionLayoutと相性が良い  では、どのように書くのかを見ていきます。
1. 配置する方向を決める android:orientationから、horizontal or verticalを指定できます。
&amp;lt;androidx.constraintlayout.widget.ConstraintLayout android:layout_width=&amp;quot;match_parent&amp;quot; android:layout_height=&amp;quot;match_parent&amp;quot;&amp;gt; &amp;lt;androidx.constraintlayout.helper.widget.Flow android:id=&amp;quot;@+id/flow&amp;quot; android:layout_width=&amp;quot;0dp&amp;quot; android:layout_height=&amp;quot;0dp&amp;quot; android:orientation=&amp;quot;horizontal&amp;quot; android:background=&amp;quot;@android:color/white&amp;quot; app:layout_constraintBottom_toBottomOf=&amp;quot;parent&amp;quot; app:layout_constraintEnd_toEndOf=&amp;quot;parent&amp;quot; app:layout_constraintStart_toStartOf=&amp;quot;parent&amp;quot; app:layout_constraintTop_toTopOf=&amp;quot;parent&amp;quot; /&amp;gt; ...  これはorientationにhorizontalを持ちます。また、通常のViewのように各constraintsを指定し、配置することができます。
2. wrapModeを決める flow_wrapModeで指定することができます。
wrapModeでは、どのようにViewを並べるかを指定でき、3種類のmodeがあります。
 none  単純にsingle lineに並べる  chain  単純に順番に配置していく。その行（列）に収まらない場合は次の行（列）に配置する  aligned
 各要素を整列するように配置していく。テーブルのようなイメージ
&amp;lt;androidx.constraintlayout.helper.widget.Flow android:id=&amp;quot;@+id/flow&amp;quot; android:layout_width=&amp;quot;0dp&amp;quot; android:layout_height=&amp;quot;0dp&amp;quot; android:orientation=&amp;quot;horizontal&amp;quot; android:background=&amp;quot;@android:color/white&amp;quot; app:flow_wrapMode=&amp;quot;chain&amp;quot; app:layout_constraintBottom_toBottomOf=&amp;quot;parent&amp;quot; app:layout_constraintEnd_toEndOf=&amp;quot;parent&amp;quot; app:layout_constraintStart_toStartOf=&amp;quot;parent&amp;quot; app:layout_constraintTop_toTopOf=&amp;quot;parent&amp;quot; /&amp;gt;    これはchainで対象のViewを配置します。
3. 対象のViewを指定する constraint_referenced_idsから指定します。</description>
    </item>
    
    <item>
      <title>ConstraintLayoutのImageFilterViewって単体でも使えるんやなって</title>
      <link>https://satoshun.github.io/2019/04/constraintlayout-imagefilterview/</link>
      <pubDate>Mon, 15 Apr 2019 13:17:53 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2019/04/constraintlayout-imagefilterview/</guid>
      <description> ConstraintLayout 2.0.0-alphaからImageFilterViewクラスが追加されました。今まで、MotionLayoutと一緒に使うものだから、使い所限られそうだなぁ〜と思っていたのですが、単体でも使えそうだったので、その報告記事になります。
この記事ではConstraintLayout 2.0.0-alpha4を使っています。
角丸にする round属性から指定する事ができます。
&amp;lt;androidx.constraintlayout.utils.widget.ImageFilterView android:id=&amp;quot;@+id/image&amp;quot; android:layout_width=&amp;quot;100dp&amp;quot; android:layout_height=&amp;quot;100dp&amp;quot; app:layout_constraintBottom_toBottomOf=&amp;quot;parent&amp;quot; app:layout_constraintEnd_toEndOf=&amp;quot;parent&amp;quot; app:layout_constraintStart_toStartOf=&amp;quot;parent&amp;quot; app:layout_constraintTop_toTopOf=&amp;quot;parent&amp;quot; app:round=&amp;quot;0.5dp&amp;quot; /&amp;gt;  彩度 saturation属性から設定することが出来ます。
&amp;lt;androidx.constraintlayout.utils.widget.ImageFilterView android:id=&amp;quot;@+id/image&amp;quot; android:layout_width=&amp;quot;100dp&amp;quot; android:layout_height=&amp;quot;100dp&amp;quot; app:layout_constraintStart_toStartOf=&amp;quot;parent&amp;quot; app:layout_constraintTop_toTopOf=&amp;quot;parent&amp;quot; app:round=&amp;quot;0.5dp&amp;quot; app:saturation=&amp;quot;0.1&amp;quot; /&amp;gt;  コントラスト contrast属性から設定することが出来ます。
&amp;lt;androidx.constraintlayout.utils.widget.ImageFilterView android:id=&amp;quot;@+id/image&amp;quot; android:layout_width=&amp;quot;100dp&amp;quot; android:layout_height=&amp;quot;100dp&amp;quot; app:contrast=&amp;quot;0.5&amp;quot; app:layout_constraintStart_toStartOf=&amp;quot;parent&amp;quot; app:layout_constraintTop_toTopOf=&amp;quot;parent&amp;quot; app:round=&amp;quot;0.5dp&amp;quot; /&amp;gt;  暖色、寒色 warmth属性から、暖色、寒色？を設定することできます。
&amp;lt;androidx.constraintlayout.utils.widget.ImageFilterView android:id=&amp;quot;@+id/image&amp;quot; android:layout_width=&amp;quot;100dp&amp;quot; android:layout_height=&amp;quot;100dp&amp;quot; app:layout_constraintStart_toStartOf=&amp;quot;parent&amp;quot; app:layout_constraintTop_toTopOf=&amp;quot;parent&amp;quot; app:round=&amp;quot;0.5dp&amp;quot; app:warmth=&amp;quot;2&amp;quot; /&amp;gt;  &amp;lt;androidx.constraintlayout.utils.widget.ImageFilterView android:id=&amp;quot;@+id/image&amp;quot; android:layout_width=&amp;quot;100dp&amp;quot; android:layout_height=&amp;quot;100dp&amp;quot; app:layout_constraintStart_toStartOf=&amp;quot;parent&amp;quot; app:layout_constraintTop_toTopOf=&amp;quot;parent&amp;quot; app:round=&amp;quot;0.5dp&amp;quot; app:warmth=&amp;quot;0.5&amp;quot; /&amp;gt;  クロスフェード crossfade属性から設定することが出来ます。ただ、この属性はMotionLayoutと一緒に使うもので、単体では使わないと思います。
まとめ  ImageFilterView、単体でも結構使いどころあるかも😃  </description>
    </item>
    
    <item>
      <title>Android: ContraintLayoutでネガティブマージンを実現する</title>
      <link>https://satoshun.github.io/2018/07/constraintlayout-negative_margin/</link>
      <pubDate>Wed, 25 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2018/07/constraintlayout-negative_margin/</guid>
      <description>ConstraintLayoutはネガティブマージンに対応していないため、少しテクニックを使う必要があります。 この記事ではSpaceを使ったネガティブマージンの実現について説明します。
例 ネガティブマージンと同等の大きさを持ったSpaceを定義して、そこにConstraintを設定するだけです。
&amp;lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot; xmlns:app=&amp;quot;http://schemas.android.com/apk/res-auto&amp;quot; xmlns:tools=&amp;quot;http://schemas.android.com/tools&amp;quot; android:layout_width=&amp;quot;match_parent&amp;quot; android:layout_height=&amp;quot;match_parent&amp;quot; android:clipToPadding=&amp;quot;false&amp;quot; android:padding=&amp;quot;80dp&amp;quot;&amp;gt; &amp;lt;Space android:id=&amp;quot;@+id/negative&amp;quot; android:layout_width=&amp;quot;15dp&amp;quot; android:layout_height=&amp;quot;15dp&amp;quot; app:layout_constraintStart_toStartOf=&amp;quot;parent&amp;quot; app:layout_constraintTop_toTopOf=&amp;quot;parent&amp;quot; /&amp;gt; &amp;lt;ImageView android:id=&amp;quot;@+id/icon&amp;quot; android:layout_width=&amp;quot;30dp&amp;quot; android:layout_height=&amp;quot;30dp&amp;quot; android:contentDescription=&amp;quot;icon&amp;quot; app:layout_constraintBottom_toBottomOf=&amp;quot;@id/negative&amp;quot; app:layout_constraintEnd_toEndOf=&amp;quot;@id/negative&amp;quot; tools:src=&amp;quot;@tools:sample/avatars&amp;quot; /&amp;gt; &amp;lt;/androidx.constraintlayout.widget.ConstraintLayout&amp;gt;  簡単に説明すると、Spaceに15pxを指定して、bottom, endに対してconstraintを指定することで、ネガティブマージンを達成しています。 上記の例だと、
 android:layout_marginStart=&amp;quot;-15px&amp;quot; android:layout_marginTop=&amp;quot;-15px&amp;quot;  と同等の振る舞いをしています。
まとめ ConstraintLayoutではネイティブでネガティブマージンに対応していないため、Spaceを使った、ややテクニカルな方法で実現するのが良いと思われます。</description>
    </item>
    
  </channel>
</rss>