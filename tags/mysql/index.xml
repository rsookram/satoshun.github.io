<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>stsnブログ</title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>https://satoshun.github.io/tags/mysql/</link>
    <language>ja</language>
    <author>Sato Shun</author>
    <copyright>2015 Sato Shun</copyright>
    <updated>Thu, 09 Apr 2015 00:00:00 UTC</updated>
    
    
    <item>
      <title>データベース: 履歴データについて</title>
      <link>https://satoshun.github.io/2015/04/history_data/</link>
      <pubDate>Thu, 09 Apr 2015 00:00:00 UTC</pubDate>
      <author>Sato Shun</author>
      <guid>https://satoshun.github.io/2015/04/history_data/</guid>
      <description>

&lt;p&gt;RDBで履歴データを保持する方法についてまとめました. そもそも履歴データは, リレーショナルモデルとは相性が悪いので, これが正解!みたいなものはないです.&lt;/p&gt;

&lt;h2 id=&#34;履歴データとは&#34;&gt;履歴データとは?&lt;/h2&gt;

&lt;p&gt;スーパーの商品の値段のように, 時間の経過とともに属性の値が変化していくデータがあります. そのようなデータを履歴データと呼びます.&lt;/p&gt;

&lt;h2 id=&#34;フラグを付ける&#34;&gt;フラグを付ける&lt;/h2&gt;

&lt;p&gt;最初に一番オーソドックス?な, フラグをつけて管理する方法です.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;products&lt;/code&gt;テーブル&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;id&lt;/th&gt;
&lt;th&gt;name&lt;/th&gt;
&lt;th&gt;price&lt;/th&gt;
&lt;th&gt;active&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;卵&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;卵&lt;/td&gt;
&lt;td&gt;250&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;肉&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;activeなデータを取得するときは, &lt;code&gt;SELECT * FROM products WHERE active = 1;&lt;/code&gt; とします.&lt;/p&gt;

&lt;p&gt;この方法の利点はパッと見に分かりやすいことだと思います. しかし, この方法はバッドノウハウだとされています. 理由を以下にあげます.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;activeフラグはカーディナリティが低く効率が悪い&lt;/li&gt;
&lt;li&gt;テーブルサイズが時間ともに肥大化し, 検索効率が下がる恐れがある&lt;/li&gt;
&lt;li&gt;activeの更新は, アプリ側 もしくは, トリガーで制御しなければいけない&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;単純で分かりやすいですが, あまり使わないほうが良い方法のようです.&lt;/p&gt;

&lt;h2 id=&#34;範囲を指定する&#34;&gt;範囲を指定する&lt;/h2&gt;

&lt;p&gt;次は範囲を指定する方法です.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;products&lt;/code&gt;テーブル&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;id&lt;/th&gt;
&lt;th&gt;name&lt;/th&gt;
&lt;th&gt;price&lt;/th&gt;
&lt;th&gt;start_date&lt;/th&gt;
&lt;th&gt;end_date&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;卵&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;2015-03-22&lt;/td&gt;
&lt;td&gt;2015-04-06&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;卵&lt;/td&gt;
&lt;td&gt;250&lt;/td&gt;
&lt;td&gt;2015-04-07&lt;/td&gt;
&lt;td&gt;9999-01-01&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;肉&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;2015-02-01&lt;/td&gt;
&lt;td&gt;9999-01-01&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;activeなデータを取得するときは, &lt;code&gt;SELECT * FROM products WHERE NOW() BETWEEN start_date AND end_date;&lt;/code&gt; とします.&lt;/p&gt;

&lt;p&gt;この方法も分かりやすいのですが, バッドノウハウです.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;テーブルサイズが時間ともに肥大化し, 検索効率が下がる恐れがある&lt;/li&gt;
&lt;li&gt;start_date, end_dateの値を決めるロジックを, アプリ側 もしくは, トリガーに組み込む必要がある&lt;/li&gt;
&lt;li&gt;end_dateに非常に大きな値 or NULLを入れる必要がある&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;NULLはRDBにとって癌のようなもので, 出来る限り除去したほうが良いとされています. そういう意味で, あまり良い方法とは言えません.&lt;/p&gt;

&lt;h2 id=&#34;active-inactiveなデータを分割&#34;&gt;active, inactiveなデータを分割&lt;/h2&gt;

&lt;p&gt;テーブル分割をする方法です. RDBっぽい解決方法です.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;products&lt;/code&gt;テーブル&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;id&lt;/th&gt;
&lt;th&gt;name&lt;/th&gt;
&lt;th&gt;price&lt;/th&gt;
&lt;th&gt;start_date&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;卵&lt;/td&gt;
&lt;td&gt;250&lt;/td&gt;
&lt;td&gt;2015-04-06&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;肉&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;2015-04-01&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;code&gt;old_products&lt;/code&gt;テーブル&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;id&lt;/th&gt;
&lt;th&gt;name&lt;/th&gt;
&lt;th&gt;price&lt;/th&gt;
&lt;th&gt;start_date&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;卵&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;2015-03-01&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;この方法の場合, 頻繁に参照するであろう&lt;code&gt;products&lt;/code&gt;テーブルのサイズが小さくなるので検索パフォーマンスが安定します. しかし,  &lt;code&gt;products&lt;/code&gt;テーブルから, &lt;code&gt;old_products&lt;/code&gt;テーブルに移すロジックを, アプリ側 or トリガーで制御する必要があります.&lt;/p&gt;

&lt;h2 id=&#34;upcomingテーブルを使う&#34;&gt;upcomingテーブルを使う&lt;/h2&gt;

&lt;p&gt;上記の方法の拡張版です. 過去のデータだけでなく, 未来のデータを&lt;code&gt;upcoming_products&lt;/code&gt;テーブルに入れる方法です. テーブルの更新を自動的にやりたいときに有効です.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;products&lt;/code&gt;テーブル&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;id&lt;/th&gt;
&lt;th&gt;name&lt;/th&gt;
&lt;th&gt;price&lt;/th&gt;
&lt;th&gt;start_date&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;卵&lt;/td&gt;
&lt;td&gt;250&lt;/td&gt;
&lt;td&gt;2015-04-06&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;肉&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;2015-04-01&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;code&gt;old_products&lt;/code&gt;テーブル&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;id&lt;/th&gt;
&lt;th&gt;name&lt;/th&gt;
&lt;th&gt;price&lt;/th&gt;
&lt;th&gt;start_date&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;卵&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;2015-03-01&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;code&gt;upcoming_products&lt;/code&gt;テーブル&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;id&lt;/th&gt;
&lt;th&gt;name&lt;/th&gt;
&lt;th&gt;price&lt;/th&gt;
&lt;th&gt;start_date&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;肉&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;2015-05-12&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;卵&lt;/td&gt;
&lt;td&gt;400&lt;/td&gt;
&lt;td&gt;2015-05-13&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;バッチ処理を行い, &lt;code&gt;upcoming_products&lt;/code&gt;テーブルの &lt;code&gt;start_date&lt;/code&gt; が有効になったら, &lt;code&gt;products&lt;/code&gt;テーブルに移動します.&lt;/p&gt;

&lt;h2 id=&#34;外部キー制約への対応&#34;&gt;外部キー制約への対応&lt;/h2&gt;

&lt;p&gt;上記のようなルールでテーブル分割をすると, &lt;code&gt;products.id&lt;/code&gt;を外部キーに指定し, 運用することが困難になります(頻繁に&lt;code&gt;old_products&lt;/code&gt;テーブルに移動されるため). そこで, マスターテーブルを作ってしまう方法があります.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;master_products&lt;/code&gt;テーブル&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;id&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;code&gt;master_products.id&lt;/code&gt;テーブルを外部キーに指定して運用します. これで外部キーの問題が解決出来ました.&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;履歴データを保持する方法を紹介しました. 個人的には最後の方法が好みなのですが, idのみを保持するテーブルが出来てしまい, リレーショナルモデル的にどうなの?という気がしています. 何か他にいい方法があったらTwitterでぜひ教えて下さい. なんでもします.&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>[ERROR] InnoDB: Cannot allocate memory for the buffer pool の対処法</title>
      <link>https://satoshun.github.io/2015/04/mysql_memory_error/</link>
      <pubDate>Tue, 07 Apr 2015 00:00:00 UTC</pubDate>
      <author>Sato Shun</author>
      <guid>https://satoshun.github.io/2015/04/mysql_memory_error/</guid>
      <description>

&lt;p&gt;上記のエラーが出たらメモリ不足なので, スワップ領域を作るのが良いと思います.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;## swap領域の確認
$ swapon -s
Filename                Type        Size    Used    Priority

## swap領域の確保
$ sudo dd if=/dev/zero of=/swapfile bs=1024 count=1024k

## swap領域の作成
$ sudo mkswap /swapfile

## swap領域の割り当て
$ sudo swapon /swapfile

$ swapon -s
Filename                Type        Size    Used    Priority
/swapfile                               file        1048572 4320    -1

$ free
             total       used       free     shared    buffers     cached
Mem:        760132     689248      70884       4672       7740      48944
-/+ buffers/cache:     632564     127568
Swap:      1048572      88556     960016

## 再起動時にもswapを割り当てるように設定
$ sudo vi /etc/fstab
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでおｋ.&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;パフォーマンス的にはスワップ領域を確保するのではなく, メモリを増設したほうが良いと思います.&lt;/p&gt;
</description>
    </item>
    
    
  </channel>
</rss>