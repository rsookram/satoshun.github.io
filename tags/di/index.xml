<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>di on stsnブログ</title>
    <link>https://satoshun.github.io/tags/di/</link>
    <description>Recent content in di on stsnブログ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>Sato Shun</copyright>
    <lastBuildDate>Sun, 02 Feb 2020 04:51:36 +0000</lastBuildDate>
    
	<atom:link href="https://satoshun.github.io/tags/di/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Dagger2: 2.26時点でのKotlinサポート状況</title>
      <link>https://satoshun.github.io/2020/02/dagger-kotlin-support-2.26/</link>
      <pubDate>Sun, 02 Feb 2020 04:51:36 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2020/02/dagger-kotlin-support-2.26/</guid>
      <description>Daggerの2.25から少しずつKotlin向けの対応が入っています。
この記事ではそれらについて紹介していきます。
objectクラスにJvmStaticが必須ではなくなった 2.25から入った変更です。
前 @Module object AppModule { @JvmStatic // JvmStaticの指定が必須だった  @Provides fun provideFuga(): Fuga = Fuga() } 今 @Module object AppModule { @Provides fun provideFuga(): Fuga = Fuga() } Qualifierを使うときに、fieldの指定がいらなくなった これも2.25から入った変更です。
前 @Inject @field:HogeQualifier // @field:の指定が必須だった lateinit var namedObject: NamedObject 今 @Inject @HogeQualifier lateinit var namedObject: NamedObject companion objectにModuleをつけなくて良くなった これは2.26から入った変更です。
前 @Module interface MainActivityModule { @Module // 必須だった  companion object { @JvmStatic // 必須だった  @Provides fun provideTestHoge(): TestHoge = TestHoge() } } 今 @Module interface MainActivityModule { companion object { @Provides fun provideTestHoge(): TestHoge = TestHoge() } } まとめ ハマりがちだった部分が少しずつ解消されていく😊</description>
    </item>
    
    <item>
      <title>Dagger 2.22にFactoryクラスが導入されました</title>
      <link>https://satoshun.github.io/2019/04/dagger-component-factory/</link>
      <pubDate>Sun, 07 Apr 2019 06:04:22 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2019/04/dagger-component-factory/</guid>
      <description>Dagger 2.22からComponent.Factoryクラスが導入されました。この記事では、簡単な使い方とユースケースを見ていきたいと思います。
Component.Factoryとは? 実は、Component.FactoryでやれることはComponent.Builderクラスとほぼ変わりません。
例えば、次のArticlePresenterインスタンスを生成する2つのコードは本質的にやっていることは同等です。
// Factoryを使う場合 @Component interface AppComponent { val presenter: ArticlePresenter @Component.Factory interface Factory { fun create( @BindsInstance id: Long ): AppComponent } } val component = DaggerAppComponent .factory() .create(50) val presenter = component.presentere --- // Builderを使う場合 @Component interface AppComponent { val presenter: ArticlePresenter @Component.Builder interface Builder { @BindsInstance fun bindId(id: Long): Builder fun build(): AppComponent } } val component = DaggerAppComponent .builder() .bindId(50) .build() val presenter = component.</description>
    </item>
    
  </channel>
</rss>