<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Architecture on stsnブログ</title>
    <link>https://satoshun.github.io/tags/architecture/</link>
    <description>Recent content in Architecture on stsnブログ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>Sato Shun</copyright>
    <lastBuildDate>Thu, 24 Jan 2019 00:43:33 +0000</lastBuildDate>
    
	<atom:link href="https://satoshun.github.io/tags/architecture/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>FluxのDispatcherをRoomのin memoryで実装するのは、冗長なコードが多くなるので良くない</title>
      <link>https://satoshun.github.io/2019/01/room-with-flux/</link>
      <pubDate>Thu, 24 Jan 2019 00:43:33 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2019/01/room-with-flux/</guid>
      <description>FluxのDispatcherをRoom in memoryで実装すれば最高なのでは?と思い、ちょっと試してみました。
結論から申しますと冗長なコードが多く、良くないと感じました。EventBusや、他のライブラリを使って実装したほうが良いと思います😂
また、オリジナルFluxは「Dispatcherがアプリ内で1つだけ存在する」という原則があったと思いますが、それを破っています。Fluxですらない可能性があります。
Room in memory? Roomではin memoryでデータベースを作ることが出来ます。正確に言えば、SQLiteの機能をRoomのAPIとして開放しています。
使い方は次のようになります。
Room .inMemoryDatabaseBuilder(context, MyDatabase::class.java) .build()  in memoryを使う理由としては、
 ディスパッチするアクションを永続化する必要はないだろう マイグレーションが必要ない  になります。
実装に入っていく では、実装の説明をしていきます。
まずはActionをRoomのEntityとして定義します。
sealed class AuthorAction @Entity(tableName = &amp;quot;author1&amp;quot;) data class Author1( @PrimaryKey val _id: Long = 0, // always 0 val name: String, val age: Int ) : AuthorAction() @Entity(tableName = &amp;quot;author2&amp;quot;) data class Author2( @PrimaryKey val _id: Long = 0, // always 0 val name: String, val age: Int ) : AuthorAction()  Primary keyは常に一定にして、アクションは0 or 1つしか存在しないようにしておきます。仮にアクションの履歴が欲しいなら、@PrimaryKey(autoGenerate = true)を使っても良いと思います。</description>
    </item>
    
    <item>
      <title>感想: オブジェクト指向設計実践ガイド ~Rubyでわかる 進化しつづける柔軟なアプリケーションの育て方</title>
      <link>https://satoshun.github.io/2018/12/object_oriented_practical_guide/</link>
      <pubDate>Tue, 25 Dec 2018 03:00:39 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2018/12/object_oriented_practical_guide/</guid>
      <description>オブジェクト指向設計実践ガイド ~Rubyでわかる 進化しつづける柔軟なアプリケーションの育て方を読んだのでざっくりと感想。
継承とコンポジションはトレードオフ
 継承は自動的にaメッセージを委譲する  便利だが依存関係は強い 親クラスが変更されたときに、自動的に子クラスにも影響があることを意味する  継承は階層構造を生み出す  ポリモーフィズムを実現する これまた便利だが依存関係は強い  コンポジションは自動的に委譲しない  必要に応じて集約クラスで操る必要がある 依存は継承より少ない   単一責任について
 あたりまえだけど守らないといけない  無駄な責務があると再利用できない  達成することで再利用可能な素晴らしいクラスが出来る 責任の依存先が不明なときは一旦privateとかに切り出しておいて未来に託す  ダックタイピング
 ダックにより、具体的なGearクラスからロールへのマインドシフトが出来る ロールを満たすことにより要件を満たす 実装には依存しない、メッセージを送るだけで良い世界はOOPの真骨頂  依存関係について
 依存関係の向きを考えるのは大切  例えばコンストラクタ内で依存するのと、インスタンスメソッドだと距離が違う。コンストラクタ内で依存したほうが良い  さらに進めるとDI，コンストラクタの外から注入する   依存関係逆転の法則  低レイヤーに依存するのではなく、インターフェースに依存しておいて、あとから実装を注入することで達成  domain層などの他の層に依存したくない層で有効    柔軟なインターフェース
 オブジェクトを信じるようなインターフェース  どのようにするかではなく、何をするかをメソッド名にする。宣言的に  安定していなければいけない  </description>
    </item>
    
    <item>
      <title>感想: Androidアプリ設計パターン入門</title>
      <link>https://satoshun.github.io/2018/03/android-architecture-started/</link>
      <pubDate>Fri, 02 Mar 2018 00:28:00 +0000</pubDate>
      
      <guid>https://satoshun.github.io/2018/03/android-architecture-started/</guid>
      <description> Androidアプリ設計パターン入門を読んだのでざっくりと感想。
https://peaks.cc/books/architecture_patterns
感想  MVP  PresenterがViewとModelへの仲介役なので、Presenterはどうしてもfatになりそう  PresenterでView、Modelが何を出来るかを知らなければならない  Contractみたいなインタフェースを切るのは好き  それを見ただけで何をそのページでやっているのかが掴めるので  PresenterはContextを知らなく良い、Pure Javaなのでテスタブルだし綺麗になりそう  MVVM  個人的にはMVPより好き  ViewModelがViewの参照を持たなくて良いので少しスッキリする  ただViewへの参照がないだけで、LiveDataなりObservableFieldに値を書き出すので実質的にはViewがどんなことをしたいか知っているから同等といえば同等   Viewへの参照を持たないので、AACのViewModelへの適合性は高いと思う  DataBindingのObservableFieldとかを使わない前提。使うとViewへの参照を持ってメモリリークしちゃう   Flux  単一方向データフローは凄い良いと思う  単一方向はFluxだけに限らないけど、Fluxを象徴する1つの特徴  ViewModelとかPresenterって処理が集中する傾向にあると感じていて、FluxだとStore、ActionCreatorって形で切り出せるから良い FluxもAACとの相性は良いと思う  負債の話  負債に対する解決策の1つとしてReact Nativeを出すのは発想として凄いと思ったし、そういう解決方法もあるのかと思った  メモ  データ層の抽象化に関してはRepository的なものを作るで良さそう データ側はRx、UI側に反映する時はLiveDataが良さそう   </description>
    </item>
    
  </channel>
</rss>