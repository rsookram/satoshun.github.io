<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>stsnブログ</title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>https://satoshun.github.io/tags/python/</link>
    <language>ja</language>
    <author>Sato Shun</author>
    <copyright>2015 Sato Shun</copyright>
    <updated>Thu, 30 Apr 2015 00:00:00 UTC</updated>
    
    
    <item>
      <title>Python: Pythonライクな書き方 Part1</title>
      <link>https://satoshun.github.io/2015/04/python-beautiful/</link>
      <pubDate>Thu, 30 Apr 2015 00:00:00 UTC</pubDate>
      <author>Sato Shun</author>
      <guid>https://satoshun.github.io/2015/04/python-beautiful/</guid>
      <description>

&lt;p&gt;Pythonライクな書き方について紹介します. Part1です.&lt;/p&gt;

&lt;h2 id=&#34;for文関連&#34;&gt;for文関連&lt;/h2&gt;

&lt;h3 id=&#34;indexを使いたいとき&#34;&gt;indexを使いたいとき&lt;/h3&gt;

&lt;p&gt;Bad: range, lenを使う&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;names = [&#39;TDN&#39;, &#39;suzuki&#39;, &#39;tom&#39;]
for i in range(len(names)):
    print i, names[i]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Good: enumerateを使う&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for i, name in enumerate(names):
    print i, name
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2つのコレクションを扱うとき&#34;&gt;2つのコレクションを扱うとき&lt;/h3&gt;

&lt;p&gt;Bad: indexを使ってアクセスする&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;names = [&#39;TDN&#39;, &#39;suzuki&#39;, &#39;tom&#39;]
ages = [12, 19, 11]

for i in range(min(len(names), len(ages))):
    print names[i], ages[i]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Good: 組み込み関数zipを使う&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for name, age in zip(names, ages):
    print name, age
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;dictionaryでkey-valueを使う&#34;&gt;dictionaryでkey, valueを使う&lt;/h2&gt;

&lt;p&gt;Bad: keyでアクセス, valueを取得する&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;persons = {&#39;TDN&#39;: 12, &#39;tanaka&#39;: 24, &#39;nakata&#39;: 11}
for k in persons:
    print k, persons[k]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Good: itemsメソッドを使う&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;persons = {&#39;TDN&#39;: 12, &#39;tanaka&#39;: 24, &#39;nakata&#39;: 11}
for k, v in persons.items():
    print k, v
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;値の入れかえ-swap-values&#34;&gt;値の入れかえ(swap values)&lt;/h2&gt;

&lt;p&gt;Bad: tmp変数を定義する&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a = 0
b = 10

tmp = a
a = b
b = tmp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Good: onelineで交換する&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a, b = 0, 10

a, b = b, a
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;dictionaryの作成&#34;&gt;dictionaryの作成&lt;/h2&gt;

&lt;p&gt;indexを使う方法&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;names = [&#39;TDN&#39;, &#39;suzuki&#39;, &#39;tom&#39;]
d = dict(enumerate(names))

&amp;gt; {0: &#39;TDN&#39;, 1: &#39;suzuki&#39;, 2: &#39;tom&#39;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2つのリストのペアを使う方法&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;names = [&#39;TDN&#39;, &#39;suzuki&#39;, &#39;tom&#39;]
ages = [12, 19, 11]
d = dict(zip(names, ages))

&amp;gt; {&#39;tom&#39;: 11, &#39;suzuki&#39;: 19, &#39;TDN&#39;: 12}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;dictionaryを使ったグルーピング&#34;&gt;dictionaryを使ったグルーピング&lt;/h2&gt;

&lt;p&gt;Bad: ifでいちいちチェックする&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;names = [&#39;TDN&#39;, &#39;suzuki&#39;, &#39;tom&#39;, &#39;sato&#39;, &#39;seko&#39;]
d = {}
for name in names:
    key = name[0]
    if key not in d:
        d[key] = []
    d[key].append(name)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Good: setdefaultを使う&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;names = [&#39;TDN&#39;, &#39;suzuki&#39;, &#39;tom&#39;, &#39;sato&#39;, &#39;seko&#39;]
d = {}
for name in names:
    key = name[0]
    d.setdefault(key, []).append(name)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Good: defaultdictを使う&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from collections import defaultdict

names = [&#39;TDN&#39;, &#39;suzuki&#39;, &#39;tom&#39;, &#39;sato&#39;, &#39;seko&#39;]
d = defaultdict(list)
for name in names:
    key = name[0]
    d[key].append(name)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;効率のよいソート&#34;&gt;効率のよいソート&lt;/h2&gt;

&lt;p&gt;Bad: cmpを用いてソートする&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;names = [&#39;TDN&#39;, &#39;suzuki&#39;, &#39;tom&#39;]
def cmp_function(a, b):
    if len(a) &amp;gt; len(b):
        return 1
    if len(a) &amp;lt; len(b):
        return -1
    return 0
sorted(names, cmp=cmp_function)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Good: keyを用いてソートする&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sorted(names, key=len)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;ファイルを開く-閉じる時&#34;&gt;ファイルを開く, 閉じる時&lt;/h2&gt;

&lt;p&gt;Bad: finallyを使う&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;f = open(&#39;build.gradle&#39;)
try:
    data = f.read()
finally:
    f.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Good: withを使う&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;with open(&#39;build.gradle&#39;) as f:
    data = f.read()


## リスト内包

Bad: forをわざわざ使う

```python
total = 0
for i in range(10):
    total += i ** 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Good: リスト内包, ジェネレータを使う&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;total = sum(i ** 2 for i in range(10))
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;文字列結合&#34;&gt;文字列結合&lt;/h2&gt;

&lt;p&gt;Bad: stringを + でつないでいく&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;names = [&#39;TDN&#39;, &#39;suzuki&#39;, &#39;tom&#39;, &#39;sato&#39;, &#39;seko&#39;]
s = &#39;&#39;
for name in names:
    s += name
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Good: joinメソッドを使う&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;names = [&#39;TDN&#39;, &#39;suzuki&#39;, &#39;tom&#39;, &#39;sato&#39;, &#39;seko&#39;]
&#39;&#39;.join(names)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;デコレータを使う&#34;&gt;デコレータを使う&lt;/h2&gt;

&lt;p&gt;Bad: メソッド内にcacheのロジックが入りこんでいる&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def get_data(filepath, saved={}):
    if filepath in saved:
        return cache[filepath]

    with open(filepaht, &#39;r&#39;) as f:
        saved[filepath] = f.read()
    return saved[filepath]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Good: cacheのロジックを外部に切り出す&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from functools import wraps

def cache(func):
    saved = {}

    @wraps(func)
    def wrapper(filepath):
        if filepath in saved:
            return saved[filepath]
        result = func(filepath)
        saved[filepath] = result
        return result
    return wrapper


@cache
def get_data(filepath):
    with open(filepath, &#39;r&#39;) as f:
        return f.read()
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;contextmanagerを使う&#34;&gt;contextmanagerを使う&lt;/h2&gt;

&lt;p&gt;Before: 例外をpassしているのが正しいのか, 実装し忘れか判断が付き難い&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import os

try:
    os.remove(&#39;.tmp&#39;)
except OSError:
    pass
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After: ignoredのように明示的な名前をつけて定義する&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import os
from contextlib import contextmanager

@contextmanager
def ignored(*exc):
    try:
        yield
    except exc:
        pass


with ignored(OSError):
    os.remove(&#39;tmp&#39;)  
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;パート2に続く..&lt;/p&gt;

&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=OSGv2VnC0go&#34;&gt;Transforming Code into Beautiful, Idiomatic Python&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>tips: 気軽にローカルにサーバを立てる</title>
      <link>https://satoshun.github.io/2015/02/tips-ser/</link>
      <pubDate>Sun, 22 Feb 2015 02:40:23 UTC</pubDate>
      <author>Sato Shun</author>
      <guid>https://satoshun.github.io/2015/02/tips-ser/</guid>
      <description>&lt;p&gt;サクッとローカルサーバを立てるためのTipsを紹介します.&lt;/p&gt;

&lt;p&gt;下記コマンドは, Pythonが入っていれば, 問題なく動きます.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ python -m CGIHTTPServer
Serving HTTP on 0.0.0.0 port 8000 ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;僕は, 上記コマンドをaliasに登録しています.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;alias ser=&#39;python -m CGIHTTPServer&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで, serでサーバが立つようになりました.&lt;/p&gt;

&lt;p&gt;ちなみに, Portを指定することも出来ます.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ ser
Serving HTTP on 0.0.0.0 port 8000 ...

$ ser 8001
Serving HTTP on 0.0.0.0 port 8001 ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;簡単にローカルサーバを立てることが出来るようになりました.&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>デザインパターン: Null Object</title>
      <link>https://satoshun.github.io/2015/02/despatt-null_object/</link>
      <pubDate>Sun, 22 Feb 2015 02:22:23 UTC</pubDate>
      <author>Sato Shun</author>
      <guid>https://satoshun.github.io/2015/02/despatt-null_object/</guid>
      <description>

&lt;p&gt;Null Objectパターンは, オブジェクト自身にNullかどうかの判定をしてもらうデザインパターンです.&lt;/p&gt;

&lt;p&gt;このパターンのメリットは, &lt;code&gt;if (obj == null)&lt;/code&gt;のような面倒臭い記述を除去出来るところです.
また, ポリモーフィズムにより, nullの時の処理をObjectに委譲することが出来ます.
(nullの時の処理を, Objectに持たせることが出来るパターン)&lt;/p&gt;

&lt;h2 id=&#34;例&#34;&gt;例&lt;/h2&gt;

&lt;p&gt;例があった方が分かり易いので, 簡単なサンプルプログラムです.&lt;/p&gt;

&lt;p&gt;まずは, Null Objectを使わない場合になります.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Student(object):
    def __init__(self, id):
        self.id = id

    @staticmethod
    def get_student(id):
        if id &amp;lt;= 10:
            return Student(id)
        return NullStudent(id)

    def show(self):
        print(&#39;id:{}&#39;.format(self.id))


student = Student.get_student(1)
if student is not None:
    student.show()
else:
    print(&#39;not student&#39;)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;次にNull objectパターンを使い, &lt;code&gt;if student is not None:&lt;/code&gt; を除去します.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Student(object):
    def __init__(self, id):
        self.id = id

    @staticmethod
    def get_student(id):
        if id &amp;lt;= 10:
            return Student(id)
        return NullStudent(id)

    def show(self):
        print(&#39;id:{}&#39;.format(self.id))

    @property
    def is_null(self):
        return False


class NullStudent(Student):
    @property
    def is_null(self):
        return True


student = Student.get_student(1)
if student.is_null:
    print(&#39;not student&#39;)
else:
    student.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;NullStudentクラスを定義し, &lt;code&gt;is_null&lt;/code&gt;メソッドでTrueを返すようにすることで, Nullの処理を委譲しまう.&lt;/p&gt;

&lt;p&gt;しかし, これだけだと旨味が少ないので, ポリモーフィズムを使ってさらに書き換えてみます.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Student(object):
    def __init__(self, id):
        self.id = id

    @staticmethod
    def get_student(id):
        if id &amp;lt;= 10:
            return Student(id)
        return None

    def show(self):
        print(&#39;id:{}&#39;.format(self.id))

    @property
    def is_null(self):
        return False


class NullStudent(Student):
    @property
    def is_null(self):
        return True

    def show(self):
        print(&#39;null student&#39;)


student = Student.get_student(100)
student.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでオブジェクト指向的なコードになりました.&lt;/p&gt;

&lt;h3 id=&#34;まとめ&#34;&gt;まとめ&lt;/h3&gt;

&lt;p&gt;nullの時のboilerplate的な処理をオブジェクトに閉じ込めることが出来るパターンになります.
&lt;code&gt;if hoge != null&lt;/code&gt;が良く出てくるようなら, このパターンを使うと良いと思います.&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>様々な言語のフィボナッチ関数</title>
      <link>https://satoshun.github.io/2015/02/algorithm-multi_fibonacci/</link>
      <pubDate>Sun, 22 Feb 2015 00:00:00 UTC</pubDate>
      <author>Sato Shun</author>
      <guid>https://satoshun.github.io/2015/02/algorithm-multi_fibonacci/</guid>
      <description>

&lt;p&gt;Java, JavaScript, Go, Python, Bashでfibonacciを書いてみました.&lt;/p&gt;

&lt;p&gt;極力, その言語特有の機能を使って実装するようにしました.&lt;/p&gt;

&lt;h2 id=&#34;go&#34;&gt;Go&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;type fibonacci int&lt;/code&gt;で, int型にfibonacci用の関数を生やしました.
せっかくなので, goroutineも使ってみました.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

type fibonacci int

func (self fibonacci) value() chan int {
  ch := make(chan int, 1)
  a, b := 0, 1
  index := 0
  go func() {
    defer close(ch)
    for {
      if int(self) &amp;lt; index {
        break
      }
      a, b = b, a+b
      index++
      ch &amp;lt;- a
    }
  }()

  return ch
}

func main() {
  var i fibonacci
  i = 10
  for v := range i.value() {
    fmt.Printf(&amp;quot;%d &amp;quot;, v)
  }
  fmt.Println()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;python&#34;&gt;Python&lt;/h2&gt;

&lt;p&gt;iteratorを定義して, 実装しました.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Fibonacci(object):
    def __init__(self, i):
        self.__i = i
        self.index = 0

    def __iter__(self):
        self.a = 0
        self.b = 1
        return self

    def __next__(self):
        while self.__i &amp;gt;= self.index:
            self.index += 1
            self.a, self.b = self.b, self.a + self.b
            return self.a
        raise StopIteration()


if __name__ == &#39;__main__&#39;:
    f = Fibonacci(10)
    for number in f:
        print(number, end=&#39; &#39;)
    print()
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;bash&#34;&gt;bash&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;$[]&lt;/code&gt;でexpressionを表現しています. これ実装するまで知りませんでした.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;#!/bin/bash

function fib()
{
    case $1 in
        0) echo 0 ;;
        [1-2]) echo 1 ;;
        *) echo $[`fib $[$1-1]` + `fib $[$1-2]`] ;;
    esac
}

for i in {0..10}; do
    fib $i
done
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;javascript&#34;&gt;JavaScript&lt;/h2&gt;

&lt;p&gt;単純な再起で実装しました.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function fib(i) {
  return function inner(i) {
    return i &amp;gt; 2 ? inner(i - 1) + inner(i - 2) : (i === 2 ? 1 : i);
  }(i);
}

for (var i = 0; i &amp;lt;= 10; i++) {
  console.log(fib(i));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;java&#34;&gt;Java&lt;/h2&gt;

&lt;p&gt;Java8のstreamを使って実装しました. filter非常に便利.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import java.util.*;


public class Fibonacci {
    public static void main(String[] args) {
        System.out.println(fibonacci(10));
        System.out.println(fibonacci(20));
    }

    public static int fibonacci(int n) {
        List&amp;lt;Integer&amp;gt; data = new ArrayList&amp;lt;Integer&amp;gt;() {{
            add(0); add(1); add(1); add(2); add(3);
        }};

        for (int i = 4; i &amp;lt; n; i++) {
            data.add(
                data
                    .stream()
                    .filter(nn -&amp;gt; nn &amp;gt;= data.get(data.size()-2))
                    .mapToInt(nn -&amp;gt; nn)
                    .sum()
                );
        }
        return data.get(n);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;fibonacciの計算には向かないけど, Java8のstreamが便利でした. Javaも進化しているんだなと.&lt;/p&gt;
</description>
    </item>
    
    
  </channel>
</rss>