<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>stsnブログ</title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>https://satoshun.github.io/tags/reactive/</link>
    <language>ja</language>
    <author>Sato Shun</author>
    <copyright>2015 Sato Shun</copyright>
    <updated>Fri, 22 May 2015 00:00:00 UTC</updated>
    
    
    <item>
      <title>ReactiveX: Hot, Coldの違い</title>
      <link>https://satoshun.github.io/2015/05/hot_cold/</link>
      <pubDate>Fri, 22 May 2015 00:00:00 UTC</pubDate>
      <author>Sato Shun</author>
      <guid>https://satoshun.github.io/2015/05/hot_cold/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://reactivex.io/&#34;&gt;ReactiveX&lt;/a&gt;における, &lt;code&gt;Cold/Hot&lt;/code&gt; Observableの違いを説明します.&lt;/p&gt;

&lt;p&gt;(本文中の「subscribeする」と, 「Observerを登録する」は同義です.)&lt;/p&gt;

&lt;h2 id=&#34;cold-observable&#34;&gt;Cold Observable&lt;/h2&gt;

&lt;p&gt;Cold ObservableはSubscribeされると動作を開始します.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var source = Rx.Observable.range(1, 10);

// 何か処理
// ...

source.subscribe(function(x) {
  console.log(x); // 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;例えば, 上のコードだと, sourceを定義した時点ではストリームが生成されておらず,
source.subscribeされた時に, 初めてストリームが生成されます.
遅延評価(lazy evaluation)のような振る舞いをします.&lt;/p&gt;

&lt;p&gt;次に, 1つのCold Observableに対して複数subscribeしたとします.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var source = Rx.Observable.range(1, 10);

// 何か処理
// ...

source.subscribe(function(x) {
  console.log(x); // 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
});
source.subscribe(function(x) {
  console.log(x); // 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2つのsubscribeに対して, 別々のストリームが生成されます. 各subscribeは, &lt;code&gt;完全に独立して動作&lt;/code&gt;します.&lt;/p&gt;

&lt;p&gt;Cold Observableをまとめると,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;subscribeされるまでCold状態(ストリームが生成されない)&lt;/li&gt;
&lt;li&gt;ストリームはObserverごとに独立して生成される&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;hot-observable&#34;&gt;Hot Observable&lt;/h2&gt;

&lt;p&gt;次にHot Observableです. Hot Observableはsubscribeしないでもストリームが生成されます.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var source = Rx.Observable.interval(1000);
var hot = source.publish();

// この時点ではストリームは生成されていない
hot.subscribe(function() {
  console.log(&#39;part1&#39;);
});

// ストリームが生成される
hot.connect();

hot.subscribe(function() {
  console.log(&#39;part2&#39;);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;RxJSでは, publishメソッドをコールするとHotなObservableを作成することが出来ます. それに対して, connectするとストリームが流れ始めます.
subscribeとは無関係にストリームが生成されるのがポイントです. Observerが登録されていない時は, データは消滅します.
また, HotなObservableは, 1つのストリームに対して複数subscribeすることが出来ます. Coldの場合は, ストリームとsubscribeは, 1対1だったのが, Hotの場合は1対多になります.&lt;/p&gt;

&lt;p&gt;Hot Observableをまとめると,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;subscribeとは無関係にストリームが生成される&lt;/li&gt;
&lt;li&gt;複数Observerを1つのストリームの上に乗せることが出来る&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;Hot, ColdなObservableについて説明しました. 1つのストリーム(同じデータ)に対して複数のことをしたいときはHot, そうでない時はColdを使えば良いと思います. 基本的にはColdを扱うことが多いとは思います.&lt;/p&gt;
</description>
    </item>
    
    
  </channel>
</rss>